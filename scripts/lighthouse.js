#!/usr/bin/env node

const lighthouse = require('lighthouse/core/index.cjs');
const chromeLauncher = require('chrome-launcher');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  port: 3000,
  url: 'http://localhost:3000',
  outputDir: './lighthouse-reports',
  budget: {
    performance: 85,
    accessibility: 90,
    'best-practices': 85,
    seo: 90,
    pwa: 80
  }
};

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
if (!fs.existsSync(config.outputDir)) {
  fs.mkdirSync(config.outputDir, { recursive: true });
}

async function runLighthouse() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ Lighthouse –∞—É–¥–∏—Ç–∞...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º Chrome
  const chrome = await chromeLauncher.launch({
    chromeFlags: ['--headless', '--no-sandbox', '--disable-gpu']
  });
  
  console.log(`üåê Chrome –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${chrome.port}`);
  
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Lighthouse
    const options = {
      port: chrome.port,
      output: 'html',
      onlyCategories: ['performance', 'accessibility', 'best-practices', 'seo', 'pwa'],
      formFactor: 'mobile',
      throttling: {
        rttMs: 40,
        throughputKbps: 10240,
        cpuSlowdownMultiplier: 1,
        requestLatencyMs: 0,
        downloadThroughputKbps: 0,
        uploadThroughputKbps: 0
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
    console.log(`üìä –ê—É–¥–∏—Ç ${config.url}...`);
    const runnerResult = await lighthouse(config.url, options);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const reportPath = path.join(config.outputDir, `lighthouse-report-${timestamp}.html`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    fs.writeFileSync(reportPath, runnerResult.report);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const scores = runnerResult.lhr.categories;
    const results = {
      performance: Math.round((scores.performance?.score || 0) * 100),
      accessibility: Math.round((scores.accessibility?.score || 0) * 100),
      'best-practices': Math.round((scores['best-practices']?.score || 0) * 100),
      seo: Math.round((scores.seo?.score || 0) * 100),
      pwa: Math.round((scores.pwa?.score || 0) * 100)
    };
    
    console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞:');
    console.log('='.repeat(50));
    Object.entries(results).forEach(([category, score]) => {
      const status = score >= config.budget[category] ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${category.toUpperCase()}: ${score}/100`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞:');
    console.log('='.repeat(50));
    let allPassed = true;
    Object.entries(results).forEach(([category, score]) => {
      const target = config.budget[category] || 0;
      const passed = score >= target;
      if (!passed) allPassed = false;
      console.log(`${passed ? '‚úÖ' : '‚ùå'} ${category}: ${score} >= ${target}`);
    });
    
    console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞`);
    
    if (!allPassed) {
      console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –±—é–¥–∂–µ—Ç—É!');
      process.exit(1);
    } else {
      console.log('\n‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –±—é–¥–∂–µ—Ç—É!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Lighthouse:', error.message);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º Chrome
    await chrome.kill();
    console.log('üîí Chrome –∑–∞–∫—Ä—ã—Ç');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runLighthouse().catch(console.error);
}

module.exports = { runLighthouse, config };
