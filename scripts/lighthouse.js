#!/usr/bin/env node

const { execSync, spawn } = require('child_process');
const { writeFileSync, mkdirSync } = require('fs');
const { join } = require('path');
const chromeLauncher = require('chrome-launcher');
const lighthouse = require('lighthouse');

const PORT = 3000;
const URL = `http://localhost:${PORT}`;
const OUTPUT_DIR = join(process.cwd(), 'lighthouse-reports');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
try {
  mkdirSync(OUTPUT_DIR, { recursive: true });
} catch (error) {
  // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Lighthouse
const lighthouseConfig = {
  extends: 'lighthouse:default',
  settings: {
    onlyCategories: ['performance', 'pwa', 'accessibility', 'best-practices', 'seo'],
    formFactor: 'mobile',
    throttling: {
      rttMs: 40,
      throughputKbps: 10240,
      cpuSlowdownMultiplier: 1,
      requestLatencyMs: 0,
      downloadThroughputKbps: 0,
      uploadThroughputKbps: 0
    },
    screenEmulation: {
      mobile: true,
      width: 375,
      height: 667,
      deviceScaleFactor: 2,
      disabled: false
    },
    emulatedUserAgent: 'Mozilla/5.0 (Linux; Android 10; Pixel 3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36'
  }
};

// –ë—é–¥–∂–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const budget = {
  performance: 85,
  pwa: {
    installable: true
  },
  accessibility: 90,
  'best-practices': 85,
  seo: 90
};

async function startServer() {
  console.log('üöÄ Starting Next.js server...');
  
  return new Promise((resolve, reject) => {
    const server = spawn('npm', ['start'], {
      stdio: 'pipe',
      shell: true
    });
    
    server.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(output);
      
      if (output.includes('Ready - started server on') || output.includes('Local:')) {
        console.log('‚úÖ Server is ready!');
        setTimeout(() => resolve(server), 2000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      }
    });
    
    server.stderr.on('data', (data) => {
      console.error('Server error:', data.toString());
    });
    
    server.on('error', (error) => {
      console.error('Failed to start server:', error);
      reject(error);
    });
    
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    setTimeout(() => {
      reject(new Error('Server startup timeout'));
    }, 30000);
  });
}

async function waitForServer() {
  console.log('‚è≥ Waiting for server to be ready...');
  
  for (let i = 0; i < 30; i++) {
    try {
      execSync(`curl -f ${URL}/api/health`, { stdio: 'ignore' });
      console.log('‚úÖ Server health check passed!');
      return;
    } catch (error) {
      console.log(`‚è≥ Attempt ${i + 1}/30: Server not ready yet...`);
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  throw new Error('Server health check failed after 60 seconds');
}

async function runLighthouse() {
  console.log('üîç Launching Chrome...');
  const chrome = await chromeLauncher.launch({
    chromeFlags: ['--headless', '--no-sandbox', '--disable-gpu']
  });
  
  console.log('üìä Running Lighthouse audit...');
  const runnerResult = await lighthouse(URL, {
    port: chrome.port,
    ...lighthouseConfig
  });
  
  const report = runnerResult.lhr;
  const categories = report.categories;
  
  console.log('\nüìà Lighthouse Results:');
  console.log('=====================');
  
  let allPassed = true;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Performance
  const performance = categories.performance.score * 100;
  console.log(`Performance: ${performance.toFixed(1)}/100 (target: ‚â•${budget.performance})`);
  if (performance < budget.performance) {
    console.log('‚ùå Performance below target!');
    allPassed = false;
  } else {
    console.log('‚úÖ Performance target met!');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º PWA
  const pwa = categories.pwa.score * 100;
  console.log(`PWA: ${pwa.toFixed(1)}/100 (target: installable)`);
  if (!categories.pwa.score || categories.pwa.score < 0.9) {
    console.log('‚ùå PWA not installable!');
    allPassed = false;
  } else {
    console.log('‚úÖ PWA is installable!');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Accessibility
  const accessibility = categories.accessibility.score * 100;
  console.log(`Accessibility: ${accessibility.toFixed(1)}/100 (target: ‚â•${budget.accessibility})`);
  if (accessibility < budget.accessibility) {
    console.log('‚ùå Accessibility below target!');
    allPassed = false;
  } else {
    console.log('‚úÖ Accessibility target met!');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Best Practices
  const bestPractices = categories['best-practices'].score * 100;
  console.log(`Best Practices: ${bestPractices.toFixed(1)}/100 (target: ‚â•${budget['best-practices']})`);
  if (bestPractices < budget['best-practices']) {
    console.log('‚ùå Best Practices below target!');
    allPassed = false;
  } else {
    console.log('‚úÖ Best Practices target met!');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º SEO
  const seo = categories.seo.score * 100;
  console.log(`SEO: ${seo.toFixed(1)}/100 (target: ‚â•${budget.seo})`);
  if (seo < budget.seo) {
    console.log('‚ùå SEO below target!');
    allPassed = false;
  } else {
    console.log('‚úÖ SEO target met!');
  }
  
  console.log('\n=====================');
  
  if (allPassed) {
    console.log('üéâ All Lighthouse targets met!');
  } else {
    console.log('‚ö†Ô∏è  Some Lighthouse targets not met!');
  }
  
  await chrome.kill();
  
  return { report, allPassed };
}

async function saveReport(report) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `lighthouse-report-${timestamp}.html`;
  const filepath = join(OUTPUT_DIR, filename);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
  const html = await lighthouse.generateReport(report, 'html');
  writeFileSync(filepath, html);
  
  console.log(`üìÑ Report saved: ${filepath}`);
  
  // –ï—Å–ª–∏ –≤ CI, –≤—ã–≤–æ–¥–∏–º –ø—É—Ç—å –¥–ª—è artifacts
  if (process.env.CI) {
    console.log(`::set-output name=report-path::${filepath}`);
    console.log(`::set-output name=report-filename::${filename}`);
  }
  
  return filepath;
}

async function main() {
  let server = null;
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server = await startServer();
    
    // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    await waitForServer();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Lighthouse
    const { report, allPassed } = await runLighthouse();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    await saveReport(report);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    process.exit(allPassed ? 0 : 1);
    
  } catch (error) {
    console.error('‚ùå Lighthouse script failed:', error.message);
    process.exit(1);
  } finally {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    if (server) {
      console.log('üõë Stopping server...');
      server.kill('SIGTERM');
    }
  }
}

if (require.main === module) {
  main();
}
